@page "/"

@using ListasEnlazadasSimples.DTO
@using ListasEnlazadasSimples.Services

<PageTitle>Home</PageTitle>

<div class="container mt-5">
    <div class="row">
        <div class="col-md-6">
            <div class="input-group">
                <input type="text" class="form-control" placeholder="Ingrese información" @bind="Info" />
                <div class="input-group-append">
                    <div class="dropdown">
                        <button class="btn btn-outline-secondary dropdown-toggle" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            Opciones
                        </button>
                        <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                            <button class="dropdown-item" @onclick="AgregarNodoInicio">Agregar Nodo Al Inicio</button>
                            <div class="dropdown-divider"></div>
                            <button class="dropdown-item" @onclick="AgregarNodoFinal">Agregar Nodo Al Final</button>
                            <div class="dropdown-divider"></div>
                            <button class="dropdown-item" @onclick="() => AgregarNodoAntesDeDatoX()">Agregar Nodo Antes De Dato X</button>
                            <input type="text" class="form-control" placeholder="Ingrese el dato X" @bind="datoX" />
                            <div class="dropdown-divider"></div>
                            <button class="dropdown-item" @onclick="() => AgregarNodoDespuesDeDatoX()">Agregar Nodo Después De Dato X</button>
                            <input type="text" class="form-control" placeholder="Ingrese el dato X" @bind="datoX" />
                            <div class="dropdown-divider"></div>
                            <button class="dropdown-item" @onclick="AgregarNodoEnPosicionEspecifica">Agregar Nodo En Ubicación Específica</button>
                            <input type="number" class="form-control" placeholder="Ingrese la ubicación específica" @bind="posicion" />
                            <div class="dropdown-divider"></div>
                            <button class="dropdown-item" @onclick="AgregarNodoEnPosicionEspecifica">Agregar Nodo Antes De Ubicación Específica</button>
                            <input type="number" class="form-control" placeholder="Ingrese la ubicación específica" @bind="posicion" />
                            @*                             <button class="dropdown-item" @onclick="AgregarNodoEnPosicionEspecifica">Agregar Nodo En Ubicación Específica</button>
                            <button class="dropdown-item" @onclick="AgregarNodoAntesDePosicionEspecifica">Agregar Nodo Antes De Ubicación Específica</button>
                            <button class="dropdown-item" @onclick="AgregarNodoDespuesDePosicionEspecifica">Agregar Nodo Después De Ubicación Específica</button>
                            <div class="dropdown-divider"></div>
                            <button class="dropdown-item" @onclick="RecorridoRecursivoDeLaLista">Recorrido Recursivo de la Lista</button>
                            <button class="dropdown-item" @onclick="BuscarElementoEnParticular">Buscar Elemento en Particular</button> *@
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <hr />

    <p class="lead">@Mensaje</p>

    <hr />

    <ul class="list-group list-group-numbered list-group-horizontal">
        @foreach (var item in Lista)
        {
            <li class="list-group-item">@item</li>
        }
    </ul>
</div>

@code {

    public string Info { get; set; }
    public string datoX { get; set; }
    public int posicion { get; set; }

    public ListasEnlazadasSimples Lista { get; set; } = new ListasEnlazadasSimples();

    string Mensaje = string.Empty;

    void AgregarNodoFinal()
    {
        Nodo nuevoNodo = new Nodo(Info);
        Mensaje = Lista.AgregarNodoAlFinal(nuevoNodo);
        Info = string.Empty;
    }

    void AgregarNodoInicio()
    {
        Nodo nuevoNodo = new Nodo(Info);
        Mensaje = Lista.AgregarNodoAlInicio(nuevoNodo);
        Info = string.Empty;
    }

    void AgregarNodoAntesDeDatoX()
    {
        Nodo nuevoNodo = new Nodo(Info);
        Mensaje = Lista.AgregarNodoAntesDeDatoX(datoX, nuevoNodo);
        Info = string.Empty;
        datoX = string.Empty;
    }

    void AgregarNodoDespuesDeDatoX()
    {
        Nodo nuevoNodo = new Nodo(Info);
        Mensaje = Lista.AgregarNodoDespuesDeDatoX(datoX, nuevoNodo);
        Info = string.Empty;
        datoX = string.Empty;
    }

    void AgregarNodoEnPosicionEspecifica()
    {
        Nodo nuevoNodo = new Nodo(Info);

        if (posicion <= 0)
        {
            Mensaje = "La ubicación específica debe ser mayor que cero.";
        }
        else if (posicion == 1)
        {
            Mensaje = Lista.AgregarNodoAlInicio(nuevoNodo);
        }
        else
        {
            Mensaje = Lista.AgregarNodoEnPosicionEspecifica(nuevoNodo, posicion);
        }

        Info = string.Empty;
        posicion = 0;
    }


    void AgregarNodoAntesDePosicionEspecifica()
    {
        Nodo nuevoNodo = new Nodo(Info);

        if (posicion <= 0)
        {
            Mensaje = "La ubicación específica debe ser mayor que cero.";
        }
        else
        {
            Mensaje = Lista.AgregarNodoAntesDePosicionEspecifica(nuevoNodo, posicion);
        }

        Info = string.Empty;
        posicion = 0;
    }


    void AgregarNodoDespuesDeUbicacionEspecifica()
    {
        Nodo nuevoNodo = new Nodo(Info);

            if (posicion < 0)
            {
                Mensaje = "La ubicación específica debe ser un número positivo.";
            }
            else
            {
                Mensaje = Lista.AgregarNodoDespuesDePosicionEspecifica(nuevoNodo, posicion);
            }


        Info = string.Empty;
        posicion = 0; 
    }


    void RecorridoRecursivoDeLaLista()
    {

    }

    void BuscarElementoEnParticular()
    {

    }
}
